/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package page;

import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;

import post.EditPost;

/**
 *
 * @author emirh
 */
public class PhotoPage extends javax.swing.JFrame {

    private String photoUsername;
    private String stalkerUsername;
	private int photoNumber;
	private JFrame oldFrame;
	private String adminUser;
	/**
     * Creates new form PhotoPage
     */
    public PhotoPage(String photoUsername, String stalkerUsername, int photoNumber, javax.swing.JFrame oldFrame) {
    	this.oldFrame = oldFrame;
    	this.photoUsername = photoUsername;
    	this.stalkerUsername = stalkerUsername;
    	this.photoNumber = photoNumber;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

    	photo = new javax.swing.JLabel();
        ImageIcon photoIcon = new ImageIcon("./src/userInfo/"+photoUsername+"/Posts/"+photoNumber+".png");
        ImageIcon resizedIcon = new ImageIcon(photoIcon.getImage().getScaledInstance(300, 300, Image.SCALE_SMOOTH));
        photo.setIcon(resizedIcon);
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        usernameDescription = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        likeButton = new javax.swing.JButton();
        likeCount = new javax.swing.JLabel();
        dislikeButton = new javax.swing.JButton();
        dislikeCount = new javax.swing.JLabel();
        
		try {
			String p = "./src/userInfo/"+photoUsername;
			Scanner in = new Scanner(new File(p+"/Posts/"+photoNumber+"description.txt"));
			ImageIcon profileIcon = new ImageIcon(p+"/profilePhoto.png");
			usernameDescription.setIcon(new ImageIcon(profileIcon.getImage().getScaledInstance(30, 30, Image.SCALE_SMOOTH)));
			if(in.hasNext()) {
				usernameDescription.setText(photoUsername+": "+in.nextLine());
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
        
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    	
        addWindowListener(new WindowAdapter() {
            //I skipped unused callbacks for readability

            @Override
            public void windowClosing(WindowEvent e) {
            	if(oldFrame!=null) {
            		dispose();
            		oldFrame.setVisible(true);
            	}else dispose();
            }
        });

        jPanel1.setLayout(new java.awt.GridLayout(0, 2));
        jScrollPane1.setViewportView(jPanel1);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        
		try {
			File file = new File("./users.txt");
			Scanner in = new Scanner(file);
        while(in.hasNextLine()) {
        	String user = in.nextLine();
        	String[] userSplit = user.split(";");
        	if(userSplit[6].equals("Admin User")) {
        		adminUser = userSplit[3];
        	}
        }
		} catch (FileNotFoundException e3) {
			// TODO Auto-generated catch block
			e3.printStackTrace();
		}
        
        jButton2.setText("Edit");
        if(!stalkerUsername.equals(photoUsername)&&!stalkerUsername.equals(adminUser)) {
        	jButton2.setVisible(false);
        }
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        usernameDescription.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usernameDescriptionMouseClicked(evt);
            }
        });
        
        try {
        	File likeUsername = new File("./src/userInfo/"+photoUsername+"/Posts/"+photoNumber+"likeCountList.txt");
			Scanner input = new Scanner(likeUsername);
			boolean liked = false;
			while(input.hasNextLine()) {
				if(input.nextLine().equals(stalkerUsername)) {
					liked=true;
				}
			}
			input.close();
			if(liked) {
				likeButton.setText("Liked");
			}else likeButton.setText("Like");
		} catch (FileNotFoundException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
        
        likeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                likeButtonActionPerformed(evt);
            }
        });
        
        try {
        	File likeCountFile = new File("./src/userInfo/"+photoUsername+"/Posts/"+photoNumber+"likeCount.txt");
			Scanner likeCountInput = new Scanner(likeCountFile);
			likeCount.setText(likeCountInput.next());
			likeCountInput.close();
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

        dislikeButton.setText("Dislike");
        dislikeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dislikeButtonActionPerformed(evt);
            }
        });

        try {
        	File dislikeCountFile = new File("./src/userInfo/"+photoUsername+"/Posts/"+photoNumber+"dislikeCount.txt");
			Scanner dislikeCountInput = new Scanner(dislikeCountFile);
			dislikeCount.setText(dislikeCountInput.next());
			dislikeCountInput.close();
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usernameDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addComponent(photo, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(likeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(likeCount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dislikeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dislikeCount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(likeButton)
                    .addComponent(likeCount)
                    .addComponent(dislikeButton)
                    .addComponent(dislikeCount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(photo, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    	String comment = jTextField1.getText();
    	File comments = new File("./src/userInfo/"+photoUsername+"/Posts/"+photoNumber+"comment.txt");
    	PrintWriter commentWriter;
		try {
			commentWriter = new PrintWriter(new FileWriter(comments,true));
			commentWriter.printf("%s: %s%n", stalkerUsername,comment);
			commentWriter.close();
			refreshComment();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    	EditPost edit = new EditPost(photoUsername, photoNumber);
    	this.dispose();
    	edit.setVisible(true);
    	edit.pack();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void likeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_likeButtonActionPerformed
        // TODO add your handling code here:
    	if(likeButton.getText().equals("Like")&&dislikeButton.getText().equals("Dislike")) {
    		likeButton.setText("Liked");//Like it and add it to photo's likes
   			String path = "./src/userInfo/";
   			try {
   				File file = new File(path+photoUsername+"/Posts/"+photoNumber+"likeCount.txt");
   				Scanner input = new Scanner(file);
    			int like = Integer.parseInt(input.next());
    			like+=1;
				//Adding like to like count
				File likeFile = new File(path+photoUsername+"/Posts/"+photoNumber+"likeCount.txt");
				PrintWriter writerLike = new PrintWriter(new FileWriter(likeFile));
				writerLike.print(like);
				writerLike.close();
				likeCount.setText(String.format("%d", like));
				//Adding like to likeList
				File likeList = new File(path+photoUsername+"/Posts/"+photoNumber+"likeCountList.txt");
				PrintWriter writerLikeList = new PrintWriter(new FileWriter(likeList,true));
				writerLikeList.printf("%s%n",stalkerUsername);
				writerLikeList.close();
    		} catch (IOException e) {
    			// TODO Auto-generated catch block
    			e.printStackTrace();
    		}
    	}else if(likeButton.getText().equals("Liked")) {
    		likeButton.setText("Like");
    		String path = "./src/userInfo/"+photoUsername+"/Posts/"+photoNumber;
    		//Substracting like from like count
    		try {
				File file = new File(path+"likeCount.txt");
				Scanner input = new Scanner(file);
				int likeCountInput = Integer.parseInt(input.next());
				likeCountInput-=1;
				likeCount.setText(String.valueOf(likeCountInput));
				PrintWriter writerLike = new PrintWriter(new FileWriter(file));
				writerLike.print(likeCountInput);
				writerLike.close();
				likeCount.setText(String.format("%d", likeCountInput));
				//Substracting like from likeCountList
				File likeCountList = new File(path+"likeCountList.txt");
				Scanner inputLikeList = new Scanner(likeCountList);
				ArrayList<String> likeListArray = new ArrayList<>();
				while(inputLikeList.hasNextLine()) {
					String user = inputLikeList.nextLine();
					likeListArray.add(user);
				}
				likeListArray.remove(stalkerUsername);
				PrintWriter writerLikeList = new PrintWriter(new FileWriter(likeCountList));
				writerLikeList.print("");
				writerLikeList.close();
				PrintWriter writerLikeListSecond = new PrintWriter(new FileWriter(likeCountList,true));
				for(String user:likeListArray) {
					writerLikeListSecond.printf("%s%n",user);
				}
				writerLikeListSecond.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}
   		}//GEN-LAST:event_likeButtonActionPerformed

    private void dislikeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dislikeButtonActionPerformed
        // TODO add your handling code here:
    	if(likeButton.getText().equals("Like")&&dislikeButton.getText().equals("Dislike")) {
    		dislikeButton.setText("Disliked");//Dislike it and add it to photo's likes
   			String path = "./src/userInfo/";
   			try {
   				File file = new File(path+photoUsername+"/Posts/"+photoNumber+"dislikeCount.txt");
   				Scanner input = new Scanner(file);
    			int dislike = Integer.parseInt(input.next());
    			dislike+=1;
				//Adding like to like count
				File dislikeFile = new File(path+photoUsername+"/Posts/"+photoNumber+"dislikeCount.txt");
				PrintWriter writerDislike = new PrintWriter(new FileWriter(dislikeFile));
				writerDislike.print(dislike);
				writerDislike.close();
				dislikeCount.setText(String.format("%d", dislike));
				//Adding like to likeList
				File dislikeList = new File(path+photoUsername+"/Posts/"+photoNumber+"dislikeCountList.txt");
				PrintWriter writerDislikeList = new PrintWriter(new FileWriter(dislikeList,true));
				writerDislikeList.printf("%s%n",stalkerUsername);
				writerDislikeList.close();
    		} catch (IOException e) {
    			// TODO Auto-generated catch block
    			e.printStackTrace();
    		}
    	}else if(dislikeButton.getText().equals("Disliked")) {
    		dislikeButton.setText("Dislike");
    		String path = "./src/userInfo/"+photoUsername+"/Posts/"+photoNumber;
    		//Substracting like from like count
    		try {
				File file = new File(path+"dislikeCount.txt");
				Scanner input = new Scanner(file);
				int dislikeCountInput = Integer.parseInt(input.next());
				dislikeCountInput-=1;
				dislikeCount.setText(String.valueOf(dislikeCountInput));
				PrintWriter writerDislike = new PrintWriter(new FileWriter(file));
				writerDislike.print(dislikeCountInput);
				writerDislike.close();
				dislikeCount.setText(String.format("%d", dislikeCountInput));
				//Substracting like from likeCountList
				File dislikeCountList = new File(path+"dislikeCountList.txt");
				Scanner inputDislikeList = new Scanner(dislikeCountList);
				ArrayList<String> dislikeListArray = new ArrayList<>();
				while(inputDislikeList.hasNextLine()) {
					String user = inputDislikeList.nextLine();
					dislikeListArray.add(user);
				}
				dislikeListArray.remove(stalkerUsername);
				PrintWriter writerDislikeList = new PrintWriter(new FileWriter(dislikeCountList));
				writerDislikeList.print("");
				writerDislikeList.close();
				PrintWriter writerDislikeListSecond = new PrintWriter(new FileWriter(dislikeCountList,true));
				for(String user:dislikeListArray) {
					writerDislikeListSecond.printf("%s%n",user);
				}
				writerDislikeListSecond.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}
    }//GEN-LAST:event_dislikeButtonActionPerformed
    
    private void usernameDescriptionMouseClicked(java.awt.event.MouseEvent evt) {
    	this.dispose();
    	ProfilePage p = new ProfilePage(photoUsername, stalkerUsername);
    	p.setVisible(true);
    	p.pack();
    }
    
    private void refreshComment() throws NullPointerException{
		try {
			File comments = new File("./src/userInfo/"+photoUsername+"/Posts/"+photoNumber+"comment.txt");
			Scanner inputComments = new Scanner(comments);
			jPanel1.removeAll();
			if(comments.exists()) {
				while(inputComments.hasNextLine()) {
					String comment = inputComments.nextLine();
					String[] splitComment = comment.split(":");
					JLabel lab = new JLabel(comment);
					lab.setSize(200, 30);
					JButton setting = new JButton("...");
					setting.setSize(40, 30);
					if(photoUsername.equals(stalkerUsername)||stalkerUsername.equals(splitComment[0])||adminUser.equals(stalkerUsername)) {
						setting.addMouseListener(new java.awt.event.MouseAdapter() {
							public void mouseClicked(java.awt.event.MouseEvent evt) {
								labMouseClicked(evt);
							}	
							private void labMouseClicked(MouseEvent evt) {
								// TODO Auto-generated method stub
								deleteComment(lab.getText());
							}});
					}
					jPanel1.add(lab);
					jPanel1.add(setting);
				}
			}
			jPanel1.updateUI();
			this.pack();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    private void deleteComment(String deleteComment) {
    	try {
    		File comments = new File("./src/userInfo/"+photoUsername+"/Posts/"+photoNumber+"comment.txt");
    		ArrayList<String> commentList = new ArrayList<>();
			Scanner inputComments = new Scanner(comments);
			while(inputComments.hasNextLine()) {
				String comment = inputComments.nextLine();
				commentList.add(comment);
			}
			inputComments.close();
			int leng = commentList.size();
			for(int i=0;i<leng;i++) {
				if(commentList.get(i).equals(deleteComment)){
					commentList.remove(i);
					leng-=1;
				}
			}
			PrintWriter writer = new PrintWriter(new FileWriter(comments));
			writer.print("");
			writer.close();
			PrintWriter writerAppend = new PrintWriter(new FileWriter(comments,true));
			for(String s:commentList) {
				writerAppend.print(s+"\n");
			}
			writerAppend.close();
			jPanel1.removeAll();
			refreshComment();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PhotoPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PhotoPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PhotoPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PhotoPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new PhotoPage().setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dislikeButton;
    private javax.swing.JLabel dislikeCount;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton likeButton;
    private javax.swing.JLabel likeCount;
    private javax.swing.JLabel photo;
    private javax.swing.JLabel usernameDescription;
    // End of variables declaration//GEN-END:variables
}
